'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _reactUikitBase = require('react-uikit-base');

var _ufunc = require('ufunc');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var Badge = function Badge(props) {
  // CSS classes
  var context = {
    success: 'uk-badge-' + props.context,
    warning: 'uk-badge-' + props.context,
    danger: 'uk-badge-' + props.context
  };

  var cssClassNames = _reactUikitBase.helpers.cleanClasses(['uk-badge', props.classes, context[props.context] || null, props.notification ? 'uk-badge-notification' : null, props.className]);

  // Remove non valid html attributes
  var ignoreProps = ['children', 'classes', 'context', 'block', 'body', 'kitid', 'notification'];
  var cleanProps = _reactUikitBase.helpers.cleanProps(ignoreProps)(props);

  // Elements
  var block = _react2.default.createElement(
    'div',
    _extends({}, cleanProps, {
      className: cssClassNames,
      'data-kitid': props.kitid
    }),
    props.body,
    props.children
  );

  var inline = _react2.default.createElement(
    'span',
    _extends({}, cleanProps, (0, _reactUikitBase.events)(props), {
      className: cssClassNames,
      'data-kitid': props.kitid
    }),
    props.body,
    props.children
  );

  // Return Component
  var component = (0, _ufunc.either)(block, inline);

  return component(props.block);
};

Badge.propTypes = {
  children: _react2.default.PropTypes.any,
  className: _react2.default.PropTypes.string,
  classes: _react2.default.PropTypes.array,
  context: _react2.default.PropTypes.oneOf(['success', 'warning', 'danger']),
  block: _react2.default.PropTypes.bool,
  body: _react2.default.PropTypes.string,
  kitid: _react2.default.PropTypes.string,
  notification: _react2.default.PropTypes.bool
};

exports.default = (0, _reactUikitBase.base)(Badge);