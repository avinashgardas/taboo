'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _reactUikitBase = require('react-uikit-base');

var _ufunc = require('ufunc');

var _reactUikitBadge = require('react-uikit-badge');

var _reactUikitBadge2 = _interopRequireDefault(_reactUikitBadge);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var Panel = function Panel(props) {
  // CSS classes
  var cssClassNames = _reactUikitBase.helpers.cleanClasses(['uk-panel', props.classes, props.box ? 'uk-panel-box' : null, props.context ? 'uk-panel-box-' + props.context : null, props.divider ? 'uk-panel-divider' : null, props.header ? 'uk-panel-header' : null, props.hover ? 'uk-panel-hover' : null, props.space ? 'uk-panel-space' : null, props.className]);

  // Remove non valid html attributes
  var ignoreProps = ['badge', 'box', 'classes', 'context', 'divider', 'header', 'hover', 'icon', 'kitid', 'link', 'space', 'teaser', 'title', 'type'];
  var cleanProps = _reactUikitBase.helpers.cleanProps(ignoreProps)(props);

  // Elements
  var badge = (0, _ufunc.maybeIf)((0, _ufunc.either)(_react2.default.createElement(
    _reactUikitBadge2.default,
    { className: 'uk-panel-badge', kitid: props.kitid },
    props.badge
  ), _react2.default.createElement(
    _reactUikitBadge2.default,
    { className: 'uk-panel-badge', kitid: props.kitid, context: props.badge ? props.badge.context : null },
    props.badge ? props.badge.body : 'Note'
  ))(typeof props.badge === 'string'))(props.badge);

  var icon = (0, _ufunc.maybeIf)(_react2.default.createElement('i', { className: 'uk-icon-' + props.icon }))(props.icon);

  var teaser = (0, _ufunc.maybeIf)(_react2.default.createElement(
    'div',
    { className: 'uk-panel-teaser' },
    _react2.default.createElement('img', { src: props.teaser ? props.teaser.src : null, alt: props.teaser ? props.teaser.alt : null })
  ))(props.teaser);

  var title = (0, _ufunc.maybeIf)(_react2.default.createElement(
    'h3',
    { className: 'uk-panel-title' },
    icon,
    ' ',
    props.title
  ))(props.title);

  var attr = _extends({}, cleanProps, _extends({}, (0, _reactUikitBase.events)(props)), {
    'data-kitid': props.kitid
  });

  var type = {
    block: _react2.default.createElement(
      'div',
      _extends({}, attr, {
        className: cssClassNames
      }),
      teaser,
      badge,
      title,
      props.children
    ),

    list: _react2.default.createElement(
      'li',
      _extends({}, attr, {
        className: cssClassNames
      }),
      teaser,
      badge,
      title,
      props.children
    ),

    link: _react2.default.createElement(
      'a',
      {
        'data-kitid': props.kitid,
        href: props.link
      },
      teaser,
      badge,
      title,
      props.children
    )
  };

  // Return Component
  return type[props.type] || type['block'];
};

Panel.propTypes = {
  badge: _react2.default.PropTypes.oneOfType([_react2.default.PropTypes.string, _react2.default.PropTypes.object]),
  box: _react2.default.PropTypes.bool,
  children: _react2.default.PropTypes.any,
  classes: _react2.default.PropTypes.array,
  context: _react2.default.PropTypes.oneOf(['primary', 'secondary']),
  divider: _react2.default.PropTypes.bool,
  header: _react2.default.PropTypes.bool,
  hover: _react2.default.PropTypes.bool,
  icon: _react2.default.PropTypes.string,
  kitid: _react2.default.PropTypes.string,
  link: _react2.default.PropTypes.string,
  space: _react2.default.PropTypes.bool,
  teaser: _react2.default.PropTypes.object,
  title: _react2.default.PropTypes.string,
  type: _react2.default.PropTypes.oneOf(['link', 'list', 'block'])
};

exports.default = (0, _reactUikitBase.base)(Panel);